/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run main.nf -profile test,singularity
        nextflow run main.nf -profile test,docker

----------------------------------------------------------------------------------------
*/

params {
    config_profile_contact     = 'Kübra Narcı kuebra.narci@dkfz-heidelberg.de'
    config_profile_name        = 'Test profiler'
    config_profile_description = 'Test dataset for to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 16
    max_memory = '100.GB'
    max_time   = '8.h'

    // Input data
    input                      = "${projectDir}/testdata/samplesheet.csv"
    outdir                     = "${projectDir}/results"

    // workflow parameters
    
    estimatesex                = false
    createbafplots             = false

    minHT                      = 0

    // correctGC options
    minLim                     = 0.47
    maxLim                     = 0.53
    min_length_purity          = 1000000
    min_hetSNPs_purity         = 0       // default 500 !!
    dh_stop                    = "max"
    min_length_dh_stop         = 1000000
    dh_zero                    = "no"
    purity_min                 = 0.3
    purity_max                 = 1.0
    ploidy_min                 = 1.0
    ploidy_max                 = 6.5
    local_minium_upper_boundary_shift = 0.1

    // clusterAndPruneSegments
    min_seg_length_prune       = 100
    min_num_SNPs               = 1
    clustering                 = "no"
    min_cluster_number         = 1
    min_membership             = 0.001
    min_distance               = 0.0005

    legacyMode                 = false

     // Reference //
    genome                     = "GRCh37"

    // Annotation files
    dbsnp_snv                  = "${projectDir}/testdata/annotations/dbsnp_snv.test.vcf.gz"
    mapability_file            = "${projectDir}/testdata/annotations/mappability5.test.bed.gz"
    replication_time_file      = "${projectDir}/testdata/annotations/ReplicationTime_10cellines_mean_10KB.Rda"
    gc_content_file            = "assets/hg19/hg19_GRch37_100genomes_gc_content_10kb.txt"
    gene_annotation_file       = "${projectDir}/testdata/annotations/druggable_genes.csv"

    // get breakpoints/ PSCBS gaps
    centromer_file             = "assets/hg19/hg19_gaps.txt"

    // HDR estimation
    blacklist_file             = "assets/hg19/artifact.homoDels.potentialArtifacts.txt"
    cytobands_file             = "assets/hg19/hg19_cytoBand.txt"
 }

// Enable container engines/virtualisation envs for CI testing
// only works when specified with the profile ENV
// otherwise tests can be done with the regular provided profiles
if (System.getenv('PROFILE')) {
    if ("$PROFILE" == "docker") {
        conda.enabled                            = false
        docker.enabled                           = true
        docker.userEmulation                     = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled                     = false
        podman.enabled                           = false
        shifter.enabled                          = false
        singularity.enabled                      = false
    } else if ("$PROFILE" == "singularity") {
        conda.enabled                            = false
        params.singularity_pull_docker_container = false
        singularity.autoMounts                   = true
        singularity.enabled                      = true
        charliecloud.enabled                     = false
        docker.enabled                           = false
        podman.enabled                           = false
        shifter.enabled                          = false
    }
}
process {
   withName:'BCFTOOLS_MPILEUP|SAMTOOLS_MPILEUP|ESTIMATE_SEX|ANNOTATE_CNV|EMBED_HAPLOTYPES|DEFINE_BREAKPOINTS|ADD_SVS|ADD_CREST|PSCBS_SEGMENTATION|GENERATE_PLOTS'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
   }
    withName:'MULTIQC'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
   } 
    withName:'BEAGLE5_BEAGLE'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 12.GB * task.attempt, 'memory' ) }
   }
}