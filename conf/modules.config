/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_MPILEUP {
        ext.args   = "-A --ignore-RG -B -Q ${params.mpileup_qual} -q 1 -I "
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "{noting}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_MPILEUP {
        ext.args   = "-A --ignore-RG -B -Q ${params.mpileup_qual} -q 1 -I "
        ext.args2   = "-vc  "
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "{noting}",
            mode: params.publish_dir_mode
        ]
    }
    withName: 'ADD_HAPLOTYPES' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}/phasing"},
            pattern: "*{.tab.gz,.tab.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    
    withName: 'ANNOTATE_CNV' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}/anno_cnv"},
            pattern: "*{.tab.gz,.tab.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }

    withName: 'ADD_CREST|ADD_SVS' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.txt}",
            mode: params.publish_dir_mode
        ]
    }
    withName: GROUP_HAPLOTYPES {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}/haploblocks"},
            pattern: "*{.tab}",
            mode: params.publish_dir_mode
        ]
    }
    withName: DEFINE_BREAKPOINTS {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.txt.gz,.txt.gz.tbi,.pdf,.txt}",
            mode: params.publish_dir_mode
        ]
    }
    withName: CLUSTER_SEGMENTS {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.txt.gz,.txt.gz.tbi,.txt,.pdf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "HOMOZYGOUS_DELETIONS|SEGMENTS_TO_DATA" {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.txt.gz,.txt.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    withName: 'GC_BIAS|CONVERT_TO_JSON' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}/gc_bias"},
            pattern: "*{png,txt,tsv,json,tab.gz,txt.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: 'CREATE_BAF_PLOTS' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}/baf_plots"},
            pattern: "*{png}",
            mode: params.publish_dir_mode
        ]
    }
    withName: GENERATE_PLOTS {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}/plots"},
            pattern: "*{.png}",
            mode: params.publish_dir_mode
        ]
    }
    withName: 'PURITY_PLOIDY' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.json}",
            mode: params.publish_dir_mode
        ]
    }
    withName: GENERATE_PLOTS {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.txt}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "ESTIMATE_PEAKS|ESTIMATE_PURITY_PLOIDY|PSCBS_SEGMENTATION|ESTIMATE_HDRSCORE|ESTIMATE_SEX" {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "*{.txt}",
            mode: params.publish_dir_mode
        ]
    }
    withName: 'MERGE_SNP|MERGE_CNV' {
        ext.args   = ""
        publishDir = [
            path:  {"${params.outdir}/${meta.id}"},
            pattern: "{tab.gz,tab.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
//
// Don't publish results for these processes
//
process {    
    withName: 'GREP_SAMPLENAME|GETCHROMSIZES|EMBED_HAPLOTYPES|BEAGLE5_BEAGLE|CREATE_FAKE_SAMPLES|WIN_GENERATOR|MAKE_MOCK' {
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
}
